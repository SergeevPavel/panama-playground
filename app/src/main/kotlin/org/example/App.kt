/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

import org.example.panama.ComplexEnum
import org.example.panama.ItemWithNumber_Body
import org.example.panama.NestedStruct
import org.example.panama.SimpleStruct
import org.example.panama.`gets_callback$f`
import org.example.panama.panama_header_h.*
import java.lang.foreign.Arena

fun pass_primitives() {
    val result = primitive_arguments(15, 20)
    assert(result == 35L)
}

fun pass_struct() {
    Arena.ofConfined().use { arena ->
        val simpleStruct = SimpleStruct.allocate(arena)
        SimpleStruct.x(simpleStruct, 42);
        SimpleStruct.y(simpleStruct, -1);
        gets_simple_struct(simpleStruct)
    }
}

fun pass_struct_by_value() {
    Arena.ofConfined().use { arena ->
        val simpleStruct = SimpleStruct.allocate(arena)
        SimpleStruct.x(simpleStruct, 42);
        SimpleStruct.y(simpleStruct, -1);
        gets_simple_struct_by_value(simpleStruct)
    }
}

fun pass_nested_struct() {
    Arena.ofConfined().use { arena ->
        val nestedStruct = NestedStruct.allocate(arena)
        NestedStruct.a(nestedStruct, 42f)
        val simpleStruct = SimpleStruct.allocate(arena)
        SimpleStruct.x(simpleStruct, 123)
        SimpleStruct.y(simpleStruct, 456)
        NestedStruct.bar(nestedStruct, simpleStruct)
        NestedStruct.b(nestedStruct, 321f)
        gets_nested_struct(nestedStruct)
    }
}

fun pass_simple_enum_by_value() {
    gets_simple_enum(Two())
}

fun pass_complex_enum() {
    Arena.ofConfined().use { arena ->
        val itemWithNothing = ComplexEnum.allocate(arena)
        ComplexEnum.tag(itemWithNothing, ItemWithNothing())
        gets_complex_enum(itemWithNothing)

        val itemWithNumber = ComplexEnum.allocate(arena)
        ComplexEnum.tag(itemWithNothing, ItemWithNumber())
        val itemwithnumberBody = ItemWithNumber_Body.allocate(arena)
        ItemWithNumber_Body.x(itemwithnumberBody, 42)
        ComplexEnum.item_with_number(itemWithNumber, itemwithnumberBody)
        gets_complex_enum(itemWithNumber)
    }
}

fun pass_string() {
    Arena.ofConfined().use { arena ->
        val s = arena.allocateUtf8String("ðŸ¦€ Hello, Rusty world! ðŸ¦€")
        gets_string(s)
    }
}

fun pass_array() {
    Arena.ofConfined().use { arena ->
        val arraySize = 5L
        val array = SimpleStruct.allocateArray(arraySize, arena)
        for (i in 0 until arraySize) {
            val sl = SimpleStruct.asSlice(array, i)
            SimpleStruct.x(sl, i.toInt())
            SimpleStruct.y(sl, 100 - i)
        }
        gets_array(array, arraySize)
    }
}

fun pass_callback() {
    Arena.ofConfined().use { arena ->
        gets_callback(`gets_callback$f`.allocate({ x ->
            println("We got $x from Rust")
        }, arena))
    }
}

fun main() {
    println("Java version: ${System.getProperty("java.version")}")
    println("Java vendor: ${System.getProperty("java.vendor")}")
    println("Java home: ${System.getProperty("java.home")}")
    pass_primitives()
    pass_struct()
    pass_struct_by_value()
    pass_nested_struct()
    pass_simple_enum_by_value()
    pass_complex_enum()
    pass_string()
    pass_array()
    pass_callback()
}
