// Generated by jextract

package org.example.panama;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class panama_header_h {

    panama_header_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup(System.mapLibraryName("panama_rs"), LIBRARY_ARENA)
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int One = (int)0L;
    /**
     * {@snippet lang=c :
     * enum SimpleEnum.One = 0
     * }
     */
    public static int One() {
        return One;
    }
    private static final int Two = (int)1L;
    /**
     * {@snippet lang=c :
     * enum SimpleEnum.Two = 1
     * }
     */
    public static int Two() {
        return Two;
    }
    private static final int Three = (int)2L;
    /**
     * {@snippet lang=c :
     * enum SimpleEnum.Three = 2
     * }
     */
    public static int Three() {
        return Three;
    }
    private static final int ItemWithNumber = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ComplexEnum_Tag.ItemWithNumber = 0
     * }
     */
    public static int ItemWithNumber() {
        return ItemWithNumber;
    }
    private static final int ItemWithStruct = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ComplexEnum_Tag.ItemWithStruct = 1
     * }
     */
    public static int ItemWithStruct() {
        return ItemWithStruct;
    }
    private static final int ItemWithNothing = (int)2L;
    /**
     * {@snippet lang=c :
     * enum ComplexEnum_Tag.ItemWithNothing = 2
     * }
     */
    public static int ItemWithNothing() {
        return ItemWithNothing;
    }

    private static class primitive_arguments {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            panama_header_h.C_LONG_LONG,
            panama_header_h.C_LONG_LONG,
            panama_header_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = panama_header_h.findOrThrow("primitive_arguments");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_t primitive_arguments(uint64_t left, uint64_t right)
     * }
     */
    public static FunctionDescriptor primitive_arguments$descriptor() {
        return primitive_arguments.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_t primitive_arguments(uint64_t left, uint64_t right)
     * }
     */
    public static MethodHandle primitive_arguments$handle() {
        return primitive_arguments.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint64_t primitive_arguments(uint64_t left, uint64_t right)
     * }
     */
    public static MemorySegment primitive_arguments$address() {
        return primitive_arguments.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint64_t primitive_arguments(uint64_t left, uint64_t right)
     * }
     */
    public static long primitive_arguments(long left, long right) {
        var mh$ = primitive_arguments.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("primitive_arguments", left, right);
            }
            return (long)mh$.invokeExact(left, right);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gets_simple_struct {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            panama_header_h.C_POINTER
        );

        public static final MemorySegment ADDR = panama_header_h.findOrThrow("gets_simple_struct");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void gets_simple_struct(const struct SimpleStruct *b)
     * }
     */
    public static FunctionDescriptor gets_simple_struct$descriptor() {
        return gets_simple_struct.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void gets_simple_struct(const struct SimpleStruct *b)
     * }
     */
    public static MethodHandle gets_simple_struct$handle() {
        return gets_simple_struct.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void gets_simple_struct(const struct SimpleStruct *b)
     * }
     */
    public static MemorySegment gets_simple_struct$address() {
        return gets_simple_struct.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void gets_simple_struct(const struct SimpleStruct *b)
     * }
     */
    public static void gets_simple_struct(MemorySegment b) {
        var mh$ = gets_simple_struct.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gets_simple_struct", b);
            }
            mh$.invokeExact(b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gets_simple_struct_by_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            SimpleStruct.layout()
        );

        public static final MemorySegment ADDR = panama_header_h.findOrThrow("gets_simple_struct_by_value");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void gets_simple_struct_by_value(struct SimpleStruct b)
     * }
     */
    public static FunctionDescriptor gets_simple_struct_by_value$descriptor() {
        return gets_simple_struct_by_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void gets_simple_struct_by_value(struct SimpleStruct b)
     * }
     */
    public static MethodHandle gets_simple_struct_by_value$handle() {
        return gets_simple_struct_by_value.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void gets_simple_struct_by_value(struct SimpleStruct b)
     * }
     */
    public static MemorySegment gets_simple_struct_by_value$address() {
        return gets_simple_struct_by_value.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void gets_simple_struct_by_value(struct SimpleStruct b)
     * }
     */
    public static void gets_simple_struct_by_value(MemorySegment b) {
        var mh$ = gets_simple_struct_by_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gets_simple_struct_by_value", b);
            }
            mh$.invokeExact(b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gets_nested_struct {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            panama_header_h.C_POINTER
        );

        public static final MemorySegment ADDR = panama_header_h.findOrThrow("gets_nested_struct");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void gets_nested_struct(const struct NestedStruct *x)
     * }
     */
    public static FunctionDescriptor gets_nested_struct$descriptor() {
        return gets_nested_struct.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void gets_nested_struct(const struct NestedStruct *x)
     * }
     */
    public static MethodHandle gets_nested_struct$handle() {
        return gets_nested_struct.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void gets_nested_struct(const struct NestedStruct *x)
     * }
     */
    public static MemorySegment gets_nested_struct$address() {
        return gets_nested_struct.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void gets_nested_struct(const struct NestedStruct *x)
     * }
     */
    public static void gets_nested_struct(MemorySegment x) {
        var mh$ = gets_nested_struct.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gets_nested_struct", x);
            }
            mh$.invokeExact(x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gets_simple_enum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            panama_header_h.C_INT
        );

        public static final MemorySegment ADDR = panama_header_h.findOrThrow("gets_simple_enum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void gets_simple_enum(enum SimpleEnum x)
     * }
     */
    public static FunctionDescriptor gets_simple_enum$descriptor() {
        return gets_simple_enum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void gets_simple_enum(enum SimpleEnum x)
     * }
     */
    public static MethodHandle gets_simple_enum$handle() {
        return gets_simple_enum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void gets_simple_enum(enum SimpleEnum x)
     * }
     */
    public static MemorySegment gets_simple_enum$address() {
        return gets_simple_enum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void gets_simple_enum(enum SimpleEnum x)
     * }
     */
    public static void gets_simple_enum(int x) {
        var mh$ = gets_simple_enum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gets_simple_enum", x);
            }
            mh$.invokeExact(x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gets_complex_enum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            panama_header_h.C_POINTER
        );

        public static final MemorySegment ADDR = panama_header_h.findOrThrow("gets_complex_enum");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void gets_complex_enum(const struct ComplexEnum *x)
     * }
     */
    public static FunctionDescriptor gets_complex_enum$descriptor() {
        return gets_complex_enum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void gets_complex_enum(const struct ComplexEnum *x)
     * }
     */
    public static MethodHandle gets_complex_enum$handle() {
        return gets_complex_enum.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void gets_complex_enum(const struct ComplexEnum *x)
     * }
     */
    public static MemorySegment gets_complex_enum$address() {
        return gets_complex_enum.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void gets_complex_enum(const struct ComplexEnum *x)
     * }
     */
    public static void gets_complex_enum(MemorySegment x) {
        var mh$ = gets_complex_enum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gets_complex_enum", x);
            }
            mh$.invokeExact(x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gets_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            panama_header_h.C_POINTER
        );

        public static final MemorySegment ADDR = panama_header_h.findOrThrow("gets_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void gets_string(const char *s)
     * }
     */
    public static FunctionDescriptor gets_string$descriptor() {
        return gets_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void gets_string(const char *s)
     * }
     */
    public static MethodHandle gets_string$handle() {
        return gets_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void gets_string(const char *s)
     * }
     */
    public static MemorySegment gets_string$address() {
        return gets_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void gets_string(const char *s)
     * }
     */
    public static void gets_string(MemorySegment s) {
        var mh$ = gets_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gets_string", s);
            }
            mh$.invokeExact(s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gets_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            panama_header_h.C_POINTER,
            panama_header_h.C_LONG
        );

        public static final MemorySegment ADDR = panama_header_h.findOrThrow("gets_array");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void gets_array(const struct SimpleStruct *arr, uintptr_t len)
     * }
     */
    public static FunctionDescriptor gets_array$descriptor() {
        return gets_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void gets_array(const struct SimpleStruct *arr, uintptr_t len)
     * }
     */
    public static MethodHandle gets_array$handle() {
        return gets_array.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void gets_array(const struct SimpleStruct *arr, uintptr_t len)
     * }
     */
    public static MemorySegment gets_array$address() {
        return gets_array.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void gets_array(const struct SimpleStruct *arr, uintptr_t len)
     * }
     */
    public static void gets_array(MemorySegment arr, long len) {
        var mh$ = gets_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gets_array", arr, len);
            }
            mh$.invokeExact(arr, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gets_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            panama_header_h.C_POINTER
        );

        public static final MemorySegment ADDR = panama_header_h.findOrThrow("gets_callback");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void gets_callback(void (*f)(uint32_t))
     * }
     */
    public static FunctionDescriptor gets_callback$descriptor() {
        return gets_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void gets_callback(void (*f)(uint32_t))
     * }
     */
    public static MethodHandle gets_callback$handle() {
        return gets_callback.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void gets_callback(void (*f)(uint32_t))
     * }
     */
    public static MemorySegment gets_callback$address() {
        return gets_callback.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void gets_callback(void (*f)(uint32_t))
     * }
     */
    public static void gets_callback(MemorySegment f) {
        var mh$ = gets_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gets_callback", f);
            }
            mh$.invokeExact(f);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

